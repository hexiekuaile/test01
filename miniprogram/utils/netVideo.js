"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Video = (function () {
    function Video(vid, type, name, valueCallback) {
        this.vid = vid;
        this.type = type;
        this.name = name;
        this.valueCallback = valueCallback;
        this.convertVidToUrl();
    }
    Video.prototype.convertVidToUrl = function () {
        var that = this;
        wx.request({
            url: 'https://vv.video.qq.com/getinfo',
            data: {
                vids: that.vid,
                platform: 101001,
                charge: 0,
                otype: 'json'
            },
            header: {
                'content-type': 'application/json;charset=UTF-8'
            },
            method: 'GET',
            dataType: 'json',
            success: function (res) {
                var str = res.data;
                var url = str.match(/(?<=\[{"url":").*?(?=","vt")/);
                var urll = url ? url[0] : '';
                var fn = str.match(/(?<=,"fn":").*?(?=","fs")/);
                var fnn = fn ? fn[0] : '';
                var fvkey = str.match(/(?<=,"fvkey":").*?(?=","head")/);
                var fvkeyy = fvkey ? fvkey : '';
                var src = urll + fnn + "?vkey=" + fvkeyy;
                that.src = src;
                that.valueCallback(that);
            },
            fail: function (res) {
                console.log(that.name + ' 转换视频vid时错误：' + res.errMsg);
            }
        });
    };
    return Video;
}());
exports.Video = Video;
;
;
function getVideo(URLVideoJSON) {
    var func = function () {
        wx.request({
            url: URLVideoJSON,
            success: function (res) {
                var vs = res.data;
                func.values = new Array(vs.length);
                for (var i = 0; i < vs.length; i++)
                    func.values[i] = new Video(vs[i].vid, vs[i].type, vs[i].name, func.valuesCallback);
            },
            fail: function (res) {
                console.log('视频请求网络连接错误： ' + res.errMsg);
            }
        });
    };
    return func;
}
exports.getVideo = getVideo;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0VmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZXRWaWRlby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU9BO0lBTUUsZUFBWSxHQUFXLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxhQUFzQztRQUN6RixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBQ0QsK0JBQWUsR0FBZjtRQUNFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNmLEVBQUUsQ0FBQyxPQUFPLENBQUM7WUFDVCxHQUFHLEVBQUUsaUNBQWlDO1lBQ3RDLElBQUksRUFBRTtnQkFDSixJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2QsUUFBUSxFQUFFLE1BQU07Z0JBQ2hCLE1BQU0sRUFBRSxDQUFDO2dCQUNULEtBQUssRUFBRSxNQUFNO2FBQ2Q7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sY0FBYyxFQUFFLGdDQUFnQzthQUNqRDtZQUNELE1BQU0sRUFBRSxLQUFLO1lBQ2IsUUFBUSxFQUFFLE1BQU07WUFDaEIsT0FBTyxZQUFDLEdBQUc7Z0JBQ1QsSUFBSSxHQUFHLEdBQVcsR0FBRyxDQUFDLElBQWMsQ0FBQztnQkFFckMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUM3QixJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7Z0JBQ2hELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQzFCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFFaEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDO2dCQUN6QyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztnQkFFZixJQUFJLENBQUMsYUFBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVCLENBQUM7WUFDRCxJQUFJLFlBQUMsR0FBRztnQkFDTixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN0RCxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILFlBQUM7QUFBRCxDQUFDLEFBaERELElBZ0RDO0FBaERZLHNCQUFLO0FBZ0RqQixDQUFDO0FBTUQsQ0FBQztBQUVGLFNBQWdCLFFBQVEsQ0FBQyxZQUFvQjtJQUMzQyxJQUFJLElBQUksR0FBVztRQUNqQixFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ1QsR0FBRyxFQUFFLFlBQVk7WUFDakIsT0FBTyxZQUFDLEdBQUc7Z0JBQ1QsSUFBSSxFQUFFLEdBQVksR0FBRyxDQUFDLElBQUksQ0FBQztnQkFFM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRW5DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTtvQkFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDdkYsQ0FBQztZQUNELElBQUksWUFBQyxHQUFHO2dCQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUMxQyxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBbEJELDRCQWtCQztBQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiB5YW53ZWlcclxuICogQERhdGU6IDIwMjAtMDctMjcgMTA6MjY6NThcclxuICogQExhc3RFZGl0b3JzOiB5YW53ZWlcclxuICogQExhc3RFZGl0VGltZTogMjAyMC0wOC0xOCAxNToyMjo0M1xyXG4gKiBARGVzY3JpcHRpb24gOiBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBWaWRlbyB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/ohb7orq/op4bpopHnsbtcclxuICB2aWQ6IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6IW+6K6v6KeG6aKRdmlkXHJcbiAgdHlwZTogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v57G75Z6LXHJcbiAgbmFtZTogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lkI3np7BcclxuICBzcmM/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6IW+6K6v6KeG6aKR5a6e6ZmF572R57uc5Zyw5Z2AICBcclxuICB2YWx1ZUNhbGxiYWNrPzogKHZhbHVlOiBWaWRlbykgPT4gdm9pZDsgICAgICAgICAgICAgIC8v5Y+v6YCJ55qE5Zue6LCD5pa55rOV77yMICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gIGNvbnN0cnVjdG9yKHZpZDogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgdmFsdWVDYWxsYmFjaz86ICh2YWx1ZTogVmlkZW8pID0+IHZvaWQpIHtcclxuICAgIHRoaXMudmlkID0gdmlkO1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLnZhbHVlQ2FsbGJhY2sgPSB2YWx1ZUNhbGxiYWNrO1xyXG4gICAgdGhpcy5jb252ZXJ0VmlkVG9VcmwoKTsvL+WcqOWIneWni+WMluWvueixoeaXtu+8jOiBlOe9kei9rOWMlnZpZFxyXG4gIH1cclxuICBjb252ZXJ0VmlkVG9VcmwoKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lsIZ2aWTovazmjaLkuLpVUkws5pyJ572R57uc6K+35rGC5bu26L+fXHJcbiAgICBsZXQgdGhhdCA9IHRoaXNcclxuICAgIHd4LnJlcXVlc3Qoe1xyXG4gICAgICB1cmw6ICdodHRwczovL3Z2LnZpZGVvLnFxLmNvbS9nZXRpbmZvJyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHZpZHM6IHRoYXQudmlkLFxyXG4gICAgICAgIHBsYXRmb3JtOiAxMDEwMDEsXHJcbiAgICAgICAgY2hhcmdlOiAwLFxyXG4gICAgICAgIG90eXBlOiAnanNvbidcclxuICAgICAgfSxcclxuICAgICAgaGVhZGVyOiB7XHJcbiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnIC8vIOm7mOiupOWAvFxyXG4gICAgICB9LFxyXG4gICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICBzdWNjZXNzKHJlcykge1xyXG4gICAgICAgIGxldCBzdHI6IHN0cmluZyA9IHJlcy5kYXRhIGFzIHN0cmluZztcclxuICAgICAgICAvL+eUqOato+WImeihqOi+vuW8j1xyXG4gICAgICAgIGxldCB1cmwgPSBzdHIubWF0Y2goLyg/PD1cXFt7XCJ1cmxcIjpcIikuKj8oPz1cIixcInZ0XCIpLyk7XHJcbiAgICAgICAgbGV0IHVybGwgPSB1cmwgPyB1cmxbMF0gOiAnJztcclxuICAgICAgICBsZXQgZm4gPSBzdHIubWF0Y2goLyg/PD0sXCJmblwiOlwiKS4qPyg/PVwiLFwiZnNcIikvKTtcclxuICAgICAgICBsZXQgZm5uID0gZm4gPyBmblswXSA6ICcnO1xyXG4gICAgICAgIGxldCBmdmtleSA9IHN0ci5tYXRjaCgvKD88PSxcImZ2a2V5XCI6XCIpLio/KD89XCIsXCJoZWFkXCIpLyk7XHJcbiAgICAgICAgbGV0IGZ2a2V5eSA9IGZ2a2V5ID8gZnZrZXkgOiAnJztcclxuICAgICAgICAvL+inhOW+i3VybCArIGZuICsgJz92a2V5PScgKyBmdmtleSBcclxuICAgICAgICBsZXQgc3JjID0gdXJsbCArIGZubiArIFwiP3ZrZXk9XCIgKyBmdmtleXk7XHJcbiAgICAgICAgdGhhdC5zcmMgPSBzcmM7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhzcmMpXHJcbiAgICAgICAgdGhhdC52YWx1ZUNhbGxiYWNrISh0aGF0KTsvL++8geihqOekuuW3sue7j+WIneWni+WMlu+8jOWbnuiwg+WtmOWcqOOAguS8oOmAkuacrHZpZGVv5a+56LGhXHJcbiAgICAgIH0sXHJcbiAgICAgIGZhaWwocmVzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhhdC5uYW1lICsgJyDovazmjaLop4bpopF2aWTml7bplJnor6/vvJonICsgcmVzLmVyck1zZylcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVmlkZW8geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/mt7flkIjnsbvlnovnmoTmjqXlj6PvvIzop4bpopHmjqXlj6NcclxuICAoKTogdm9pZDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+aOpeWPo+eahOWfuuehgOaWueazlVxyXG4gIHZhbHVlczogVmlkZW9bXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6KeG6aKR5pWw57uE77yM55Sx5Z+656GA5pa55rOV5LuO572R57uc6K+35rGC5pWw5o2uXHJcbiAgdmFsdWVzQ2FsbGJhY2s/OiAodmlkZW86IFZpZGVvKSA9PiB2b2lkOyAgICAgICAgICAgLy/lj6/pgInnmoTmjqXlj6PnmoTlm57osIPmlrnms5XvvIxcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRWaWRlbyhVUkxWaWRlb0pTT046IHN0cmluZyk6IElWaWRlbyB7ICAgIC8v5o6l5Y+j5a6e546w77yM5LuF5a6e546w5LqG5Z+656GA5pa55rOV5Luj56CB77yM5pyq5a6e546w5Zue6LCD5pa55rOV77yMXHJcbiAgbGV0IGZ1bmMgPSA8SVZpZGVvPmZ1bmN0aW9uICgpIHtcclxuICAgIHd4LnJlcXVlc3QoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+e9kee7nOivt+axguWPluaVsOaNrlxyXG4gICAgICB1cmw6IFVSTFZpZGVvSlNPTiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+eugOWNleWcsOWbvuagh+iusOeCuWpzb27mlofku7bnmoTnvZHnu5zlnLDlnYBcclxuICAgICAgc3VjY2VzcyhyZXMpIHtcclxuICAgICAgICBsZXQgdnMgPSA8VmlkZW9bXT5yZXMuZGF0YTsgICAgICAgICAgICAgICAgICAgLy90eXBlc2NyaXB06Ieq5Yqo6KOF6YWN77yM5YW25LuW5L+h5oGv6YO95a2Y5Zyo77yM5LuFc3Jj5Li656m677yM5L2G5LiN5ZCv5Yqo6KeG6aKR57G755qE5p6E5bu65Zmo77yM6ZyA6KaB5Lq65belbmV35a+56LGhXHJcblxyXG4gICAgICAgIGZ1bmMudmFsdWVzID0gbmV3IEFycmF5KHZzLmxlbmd0aCk7ICAgICAgICAgICAvL+eUn+aIkOWbuuWumumVv+W6puinhumikeWvueixoSAgIFxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgZnVuYy52YWx1ZXNbaV0gPSBuZXcgVmlkZW8odnNbaV0udmlkLCB2c1tpXS50eXBlLCB2c1tpXS5uYW1lLCBmdW5jLnZhbHVlc0NhbGxiYWNrKTsvL+S6uuW3pW5ld+Wvueixoe+8jOWQr+WKqOaehOW7uuWZqO+8jOe9kee7nOaLieWPluaVsOaNrui9rOWMlnZpZOS4unNyY1xyXG4gICAgICB9LFxyXG4gICAgICBmYWlsKHJlcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfop4bpopHor7fmsYLnvZHnu5zov57mjqXplJnor6/vvJogJyArIHJlcy5lcnJNc2cpXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcbiAgcmV0dXJuIGZ1bmM7XHJcbn07XHJcbiJdfQ==