"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Video = (function () {
    function Video(vid, type, name, valueCallback) {
        this.vid = vid;
        this.type = type;
        this.name = name;
        this.valueCallback = valueCallback;
        this.convertVidToUrl();
    }
    Video.prototype.convertVidToUrl = function () {
        var that = this;
        wx.request({
            url: 'https://vv.video.qq.com/getinfo',
            data: {
                vids: that.vid,
                platform: 101001,
                charge: 0,
                otype: 'json'
            },
            header: {
                'content-type': 'application/json;charset=UTF-8'
            },
            method: 'GET',
            dataType: 'json',
            success: function (res) {
                var str = res.data;
                var url = str.match(/(?<=\[{"url":").*?(?=","vt")/);
                var urll = url ? url[0] : '';
                var fn = str.match(/(?<=,"fn":").*?(?=","fs")/);
                var fnn = fn ? fn[0] : '';
                var fvkey = str.match(/(?<=,"fvkey":").*?(?=","head")/);
                var fvkeyy = fvkey ? fvkey : '';
                var src = urll + fnn + "?vkey=" + fvkeyy;
                that.src = src;
                that.valueCallback(that);
            },
            fail: function (res) {
                console.log(that.name + ' 转换视频vid时错误：' + res.errMsg);
            }
        });
    };
    return Video;
}());
exports.Video = Video;
;
;
function getVideo(url) {
    var func = function () {
        wx.request({
            url: url,
            success: function (res) {
                var vs = res.data;
                func.values = new Array(vs.length);
                for (var i = 0; i < vs.length; i++)
                    func.values[i] = new Video(vs[i].vid, vs[i].type, vs[i].name, func.valuesCallback);
            },
            fail: function (res) {
                console.log('视频请求网络连接错误： ' + res.errMsg);
            }
        });
    };
    return func;
}
exports.getVideo = getVideo;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0VmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZXRWaWRlby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBTUUsZUFBWSxHQUFXLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxhQUFzQztRQUN6RixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBQ0QsK0JBQWUsR0FBZjtRQUNFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNmLEVBQUUsQ0FBQyxPQUFPLENBQUM7WUFDVCxHQUFHLEVBQUUsaUNBQWlDO1lBQ3RDLElBQUksRUFBRTtnQkFDSixJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2QsUUFBUSxFQUFFLE1BQU07Z0JBQ2hCLE1BQU0sRUFBRSxDQUFDO2dCQUNULEtBQUssRUFBRSxNQUFNO2FBQ2Q7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sY0FBYyxFQUFFLGdDQUFnQzthQUNqRDtZQUNELE1BQU0sRUFBRSxLQUFLO1lBQ2IsUUFBUSxFQUFFLE1BQU07WUFDaEIsT0FBTyxZQUFDLEdBQUc7Z0JBQ1QsSUFBSSxHQUFHLEdBQVcsR0FBRyxDQUFDLElBQWMsQ0FBQztnQkFFckMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUM3QixJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7Z0JBQ2hELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQzFCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFFaEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDO2dCQUN6QyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztnQkFDZixJQUFJLENBQUMsYUFBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVCLENBQUM7WUFDRCxJQUFJLFlBQUMsR0FBRztnQkFDTixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN0RCxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILFlBQUM7QUFBRCxDQUFDLEFBL0NELElBK0NDO0FBL0NZLHNCQUFLO0FBK0NqQixDQUFDO0FBTUQsQ0FBQztBQUlGLFNBQWdCLFFBQVEsQ0FBQyxHQUFXO0lBQ2xDLElBQUksSUFBSSxHQUFXO1FBQ2pCLEVBQUUsQ0FBQyxPQUFPLENBQUM7WUFDVCxHQUFHLEVBQUUsR0FBRztZQUNSLE9BQU8sWUFBQyxHQUFHO2dCQUNULElBQUksRUFBRSxHQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBRTNCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUVuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7b0JBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3ZGLENBQUM7WUFDRCxJQUFJLFlBQUMsR0FBRztnQkFDTixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDMUMsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQWxCRCw0QkFrQkM7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFZpZGVvIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+iFvuiur+inhumikeexu1xyXG4gIHZpZDogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/ohb7orq/op4bpopF2aWRcclxuICB0eXBlOiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/nsbvlnotcclxuICBuYW1lOiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WQjeensFxyXG4gIHNyYz86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/ohb7orq/op4bpopHlrp7pmYXnvZHnu5zlnLDlnYAgIFxyXG4gIHZhbHVlQ2FsbGJhY2s/OiAodmFsdWU6IFZpZGVvKSA9PiB2b2lkOyAgICAgICAgICAgICAgLy/lj6/pgInnmoTlm57osIPmlrnms5XvvIwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgY29uc3RydWN0b3IodmlkOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgbmFtZTogc3RyaW5nLCB2YWx1ZUNhbGxiYWNrPzogKHZhbHVlOiBWaWRlbykgPT4gdm9pZCkge1xyXG4gICAgdGhpcy52aWQgPSB2aWQ7XHJcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMudmFsdWVDYWxsYmFjayA9IHZhbHVlQ2FsbGJhY2s7XHJcbiAgICB0aGlzLmNvbnZlcnRWaWRUb1VybCgpO1xyXG4gIH1cclxuICBjb252ZXJ0VmlkVG9VcmwoKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lsIZ2aWTovazmjaLkuLpVUkws5pyJ572R57uc6K+35rGC5bu26L+fXHJcbiAgICBsZXQgdGhhdCA9IHRoaXNcclxuICAgIHd4LnJlcXVlc3Qoe1xyXG4gICAgICB1cmw6ICdodHRwczovL3Z2LnZpZGVvLnFxLmNvbS9nZXRpbmZvJyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHZpZHM6IHRoYXQudmlkLFxyXG4gICAgICAgIHBsYXRmb3JtOiAxMDEwMDEsXHJcbiAgICAgICAgY2hhcmdlOiAwLFxyXG4gICAgICAgIG90eXBlOiAnanNvbidcclxuICAgICAgfSxcclxuICAgICAgaGVhZGVyOiB7XHJcbiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnIC8vIOm7mOiupOWAvFxyXG4gICAgICB9LFxyXG4gICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICBzdWNjZXNzKHJlcykge1xyXG4gICAgICAgIGxldCBzdHI6IHN0cmluZyA9IHJlcy5kYXRhIGFzIHN0cmluZztcclxuICAgICAgICAvL+eUqOato+WImeihqOi+vuW8j1xyXG4gICAgICAgIGxldCB1cmwgPSBzdHIubWF0Y2goLyg/PD1cXFt7XCJ1cmxcIjpcIikuKj8oPz1cIixcInZ0XCIpLyk7XHJcbiAgICAgICAgbGV0IHVybGwgPSB1cmwgPyB1cmxbMF0gOiAnJztcclxuICAgICAgICBsZXQgZm4gPSBzdHIubWF0Y2goLyg/PD0sXCJmblwiOlwiKS4qPyg/PVwiLFwiZnNcIikvKTtcclxuICAgICAgICBsZXQgZm5uID0gZm4gPyBmblswXSA6ICcnO1xyXG4gICAgICAgIGxldCBmdmtleSA9IHN0ci5tYXRjaCgvKD88PSxcImZ2a2V5XCI6XCIpLio/KD89XCIsXCJoZWFkXCIpLyk7XHJcbiAgICAgICAgbGV0IGZ2a2V5eSA9IGZ2a2V5ID8gZnZrZXkgOiAnJztcclxuICAgICAgICAvL+inhOW+i3VybCArIGZuICsgJz92a2V5PScgKyBmdmtleSBcclxuICAgICAgICBsZXQgc3JjID0gdXJsbCArIGZubiArIFwiP3ZrZXk9XCIgKyBmdmtleXk7XHJcbiAgICAgICAgdGhhdC5zcmMgPSBzcmM7XHJcbiAgICAgICAgdGhhdC52YWx1ZUNhbGxiYWNrISh0aGF0KTtcclxuICAgICAgfSxcclxuICAgICAgZmFpbChyZXMpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGF0Lm5hbWUgKyAnIOi9rOaNouinhumikXZpZOaXtumUmeivr++8micgKyByZXMuZXJyTXNnKVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG5pbnRlcmZhY2UgSVZpZGVvIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/mt7flkIjnsbvlnovnmoTmjqXlj6PvvIzop4bpopHmjqXlj6NcclxuICAoKTogdm9pZDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5o6l5Y+j55qE5Z+656GA5pa55rOVXHJcbiAgdmFsdWVzOiBWaWRlb1tdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/op4bpopHmlbDnu4TvvIznlLHln7rnoYDmlrnms5Xku47nvZHnu5zor7fmsYLmlbDmja5cclxuICB2YWx1ZXNDYWxsYmFjaz86ICh2aWRlbzogVmlkZW8pID0+IHZvaWQ7ICAgICAgICAgICAvL+WPr+mAieeahOaOpeWPo+eahOWbnuiwg+aWueazle+8jFxyXG59O1xyXG5cclxuLy9sZXQgdXJsOiBzdHJpbmcgPSAnaHR0cHM6Ly9hLTEyNTYxMzY0OTMuY29zLmFwLW5hbmppbmcubXlxY2xvdWQuY29tL2Z5aGJzcy9kYXRhL3ZpZGVvWHVhbkNodWFuUGlhbi5qc29uJzsvL+Wuo+S8oOeJh2pzb27kv6Hmga/lnLDlnYBcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRWaWRlbyh1cmw6IHN0cmluZyk6IElWaWRlbyB7ICAgICAgICAgICAgICAgIC8v5o6l5Y+j5a6e546w77yM5LuF5a6e546w5LqG5Z+656GA5pa55rOV5Luj56CB77yM5pyq5a6e546w5Zue6LCD5pa55rOV77yMXHJcbiAgbGV0IGZ1bmMgPSA8SVZpZGVvPmZ1bmN0aW9uICgpIHtcclxuICAgIHd4LnJlcXVlc3QoeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+e9kee7nOivt+axguWPluaVsOaNrlxyXG4gICAgICB1cmw6IHVybCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+eugOWNleWcsOWbvuagh+iusOeCuWpzb27mlofku7bnmoTnvZHnu5zlnLDlnYBcclxuICAgICAgc3VjY2VzcyhyZXMpIHtcclxuICAgICAgICBsZXQgdnMgPSA8VmlkZW9bXT5yZXMuZGF0YTsgICAgICAgICAgICAgICAgICAgLy90eXBlc2NyaXB06Ieq5Yqo6KOF6YWN77yM5L2G5rKh5pyJ5ZCv5Yqo6KeG6aKR57G755qE5p6E5bu65ZmoXHJcblxyXG4gICAgICAgIGZ1bmMudmFsdWVzID0gbmV3IEFycmF5KHZzLmxlbmd0aCk7ICAgICAgICAgICAvL+eUn+aIkOWbuuWumumVv+W6puinhumikeWvueixoe+8jOe9kee7nOivt+axguinhumikeWcsOWdgCAgICAgICBcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgIGZ1bmMudmFsdWVzW2ldID0gbmV3IFZpZGVvKHZzW2ldLnZpZCwgdnNbaV0udHlwZSwgdnNbaV0ubmFtZSwgZnVuYy52YWx1ZXNDYWxsYmFjayk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGZhaWwocmVzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ+inhumikeivt+axgue9kee7nOi/nuaOpemUmeivr++8miAnICsgcmVzLmVyck1zZylcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuICByZXR1cm4gZnVuYztcclxufTtcclxuLy/lo7DmmI7lr7nosaHlj5jph49cclxuLy9leHBvcnQgbGV0IHZpZGVvID0gZ2V0VmlkZW9YdWFuQ2h1YW5QaWFuKCk7XHJcbi8v6L+Q6KGM5a+56LGh55qE5Z+656GA5pa55rOV5Luj56CB77yM572R57uc6K+35rGC5pWw5o2uXHJcbi8vbWFya2Vyc1NpbXBsZSgpO1xyXG4iXX0=