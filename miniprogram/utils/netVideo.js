"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Video = (function () {
    function Video(vid, type, name, valueCallback) {
        this.vid = vid;
        this.type = type;
        this.name = name;
        this.valueCallback = valueCallback;
        this.convertVidToUrl();
    }
    Video.prototype.convertVidToUrl = function () {
        var that = this;
        wx.request({
            url: 'https://vv.video.qq.com/getinfo',
            data: {
                vids: that.vid,
                platform: 101001,
                charge: 0,
                otype: 'json'
            },
            header: {
                'content-type': 'application/json;charset=UTF-8'
            },
            method: 'GET',
            dataType: 'json',
            success: function (res) {
                var str = res.data;
                var url = str.match(/(?<=\[{"url":").*?(?=","vt")/);
                var urll = url ? url[0] : '';
                var fn = str.match(/(?<=,"fn":").*?(?=","fs")/);
                var fnn = fn ? fn[0] : '';
                var fvkey = str.match(/(?<=,"fvkey":").*?(?=","head")/);
                var fvkeyy = fvkey ? fvkey : '';
                var src = urll + fnn + "?vkey=" + fvkeyy;
                that.src = src;
                that.valueCallback(that);
            },
            fail: function (res) {
                console.log(that.name + ' 转换视频vid时错误：' + res.errMsg);
            }
        });
    };
    return Video;
}());
exports.Video = Video;
;
;
function getVideo(URLVideoJSON) {
    var func = function () {
        wx.request({
            url: URLVideoJSON,
            success: function (res) {
                var vs = res.data;
                func.values = new Array(vs.length);
                for (var i = 0; i < vs.length; i++)
                    func.values[i] = new Video(vs[i].vid, vs[i].type, vs[i].name, func.valuesCallback);
            },
            fail: function (res) {
                console.log('视频请求网络连接错误： ' + res.errMsg);
            }
        });
    };
    return func;
}
exports.getVideo = getVideo;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0VmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZXRWaWRlby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBTUUsZUFBWSxHQUFXLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxhQUFzQztRQUN6RixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBQ0QsK0JBQWUsR0FBZjtRQUNFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNmLEVBQUUsQ0FBQyxPQUFPLENBQUM7WUFDVCxHQUFHLEVBQUUsaUNBQWlDO1lBQ3RDLElBQUksRUFBRTtnQkFDSixJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2QsUUFBUSxFQUFFLE1BQU07Z0JBQ2hCLE1BQU0sRUFBRSxDQUFDO2dCQUNULEtBQUssRUFBRSxNQUFNO2FBQ2Q7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sY0FBYyxFQUFFLGdDQUFnQzthQUNqRDtZQUNELE1BQU0sRUFBRSxLQUFLO1lBQ2IsUUFBUSxFQUFFLE1BQU07WUFDaEIsT0FBTyxFQUFQLFVBQVEsR0FBRztnQkFDVCxJQUFJLEdBQUcsR0FBVyxHQUFHLENBQUMsSUFBYyxDQUFDO2dCQUVyQyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7Z0JBQ3BELElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQzdCLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDMUIsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO2dCQUN4RCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUVoQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO2dCQUNmLElBQUksQ0FBQyxhQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUIsQ0FBQztZQUNELElBQUksWUFBQyxHQUFHO2dCQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFjLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ3RELENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0gsWUFBQztBQUFELENBQUMsQUEvQ0QsSUErQ0M7QUEvQ1ksc0JBQUs7QUErQ2pCLENBQUM7QUFNRCxDQUFDO0FBRUYsU0FBZ0IsUUFBUSxDQUFDLFlBQW9CO0lBQzNDLElBQUksSUFBSSxHQUFXO1FBQ2pCLEVBQUUsQ0FBQyxPQUFPLENBQUM7WUFDVCxHQUFHLEVBQUUsWUFBWTtZQUNqQixPQUFPLEVBQVAsVUFBUSxHQUFHO2dCQUNULElBQUksRUFBRSxHQUFZLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBRTNCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUVuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7b0JBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3ZGLENBQUM7WUFDRCxJQUFJLFlBQUMsR0FBRztnQkFDTixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDMUMsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUNGLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQWxCRCw0QkFrQkM7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFZpZGVvIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+iFvuiur+inhumikeexu1xyXG4gIHZpZDogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/ohb7orq/op4bpopF2aWRcclxuICB0eXBlOiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/nsbvlnotcclxuICBuYW1lOiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WQjeensFxyXG4gIHNyYz86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/ohb7orq/op4bpopHlrp7pmYXnvZHnu5zlnLDlnYAgIFxyXG4gIHZhbHVlQ2FsbGJhY2s/OiAodmFsdWU6IFZpZGVvKSA9PiB2b2lkOyAgICAgICAgICAgICAgLy/lj6/pgInnmoTlm57osIPmlrnms5XvvIwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgY29uc3RydWN0b3IodmlkOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgbmFtZTogc3RyaW5nLCB2YWx1ZUNhbGxiYWNrPzogKHZhbHVlOiBWaWRlbykgPT4gdm9pZCkge1xyXG4gICAgdGhpcy52aWQgPSB2aWQ7XHJcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMudmFsdWVDYWxsYmFjayA9IHZhbHVlQ2FsbGJhY2s7XHJcbiAgICB0aGlzLmNvbnZlcnRWaWRUb1VybCgpOy8v5Zyo5Yid5aeL5YyW5a+56LGh5pe277yM6IGU572R6L2s5YyWdmlkXHJcbiAgfVxyXG4gIGNvbnZlcnRWaWRUb1VybCgpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WwhnZpZOi9rOaNouS4ulVSTCzmnInnvZHnu5zor7fmsYLlu7bov59cclxuICAgIGxldCB0aGF0ID0gdGhpc1xyXG4gICAgd3gucmVxdWVzdCh7XHJcbiAgICAgIHVybDogJ2h0dHBzOi8vdnYudmlkZW8ucXEuY29tL2dldGluZm8nLFxyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgdmlkczogdGhhdC52aWQsXHJcbiAgICAgICAgcGxhdGZvcm06IDEwMTAwMSxcclxuICAgICAgICBjaGFyZ2U6IDAsXHJcbiAgICAgICAgb3R5cGU6ICdqc29uJ1xyXG4gICAgICB9LFxyXG4gICAgICBoZWFkZXI6IHtcclxuICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOCcgLy8g6buY6K6k5YC8XHJcbiAgICAgIH0sXHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgIHN1Y2Nlc3MocmVzKSB7XHJcbiAgICAgICAgbGV0IHN0cjogc3RyaW5nID0gcmVzLmRhdGEgYXMgc3RyaW5nO1xyXG4gICAgICAgIC8v55So5q2j5YiZ6KGo6L6+5byPXHJcbiAgICAgICAgbGV0IHVybCA9IHN0ci5tYXRjaCgvKD88PVxcW3tcInVybFwiOlwiKS4qPyg/PVwiLFwidnRcIikvKTtcclxuICAgICAgICBsZXQgdXJsbCA9IHVybCA/IHVybFswXSA6ICcnO1xyXG4gICAgICAgIGxldCBmbiA9IHN0ci5tYXRjaCgvKD88PSxcImZuXCI6XCIpLio/KD89XCIsXCJmc1wiKS8pO1xyXG4gICAgICAgIGxldCBmbm4gPSBmbiA/IGZuWzBdIDogJyc7XHJcbiAgICAgICAgbGV0IGZ2a2V5ID0gc3RyLm1hdGNoKC8oPzw9LFwiZnZrZXlcIjpcIikuKj8oPz1cIixcImhlYWRcIikvKTtcclxuICAgICAgICBsZXQgZnZrZXl5ID0gZnZrZXkgPyBmdmtleSA6ICcnO1xyXG4gICAgICAgIC8v6KeE5b6LdXJsICsgZm4gKyAnP3ZrZXk9JyArIGZ2a2V5IFxyXG4gICAgICAgIGxldCBzcmMgPSB1cmxsICsgZm5uICsgXCI/dmtleT1cIiArIGZ2a2V5eTtcclxuICAgICAgICB0aGF0LnNyYyA9IHNyYztcclxuICAgICAgICB0aGF0LnZhbHVlQ2FsbGJhY2shKHRoYXQpOy8v77yB6KGo56S65bey57uP5Yid5aeL5YyW77yM5Zue6LCD5a2Y5Zyo44CC5Lyg6YCS5pysdmlkZW/lr7nosaFcclxuICAgICAgfSxcclxuICAgICAgZmFpbChyZXMpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyh0aGF0Lm5hbWUgKyAnIOi9rOaNouinhumikXZpZOaXtumUmeivr++8micgKyByZXMuZXJyTXNnKVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElWaWRlbyB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+a3t+WQiOexu+Wei+eahOaOpeWPo++8jOinhumikeaOpeWPo1xyXG4gICgpOiB2b2lkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5o6l5Y+j55qE5Z+656GA5pa55rOVXHJcbiAgdmFsdWVzOiBWaWRlb1tdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/op4bpopHmlbDnu4TvvIznlLHln7rnoYDmlrnms5Xku47nvZHnu5zor7fmsYLmlbDmja5cclxuICB2YWx1ZXNDYWxsYmFjaz86ICh2aWRlbzogVmlkZW8pID0+IHZvaWQ7ICAgICAgICAgICAvL+WPr+mAieeahOaOpeWPo+eahOWbnuiwg+aWueazle+8jFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZpZGVvKFVSTFZpZGVvSlNPTjogc3RyaW5nKTogSVZpZGVvIHsgICAgICAgICAgICAgICAgLy/mjqXlj6Plrp7njrDvvIzku4Xlrp7njrDkuobln7rnoYDmlrnms5Xku6PnoIHvvIzmnKrlrp7njrDlm57osIPmlrnms5XvvIxcclxuICBsZXQgZnVuYyA9IDxJVmlkZW8+ZnVuY3Rpb24gKCkge1xyXG4gICAgd3gucmVxdWVzdCh7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v572R57uc6K+35rGC5Y+W5pWw5o2uXHJcbiAgICAgIHVybDogVVJMVmlkZW9KU09OLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v566A5Y2V5Zyw5Zu+5qCH6K6w54K5anNvbuaWh+S7tueahOe9kee7nOWcsOWdgFxyXG4gICAgICBzdWNjZXNzKHJlcykge1xyXG4gICAgICAgIGxldCB2cyA9IDxWaWRlb1tdPnJlcy5kYXRhOyAgICAgICAgICAgICAgICAgICAvL3R5cGVzY3JpcHToh6rliqjoo4XphY3vvIzlhbbku5bkv6Hmga/pg73lrZjlnKjvvIzku4VzcmPkuLrnqbrvvIzkvYbkuI3lkK/liqjop4bpopHnsbvnmoTmnoTlu7rlmajvvIzpnIDopoHkurrlt6VuZXflr7nosaFcclxuXHJcbiAgICAgICAgZnVuYy52YWx1ZXMgPSBuZXcgQXJyYXkodnMubGVuZ3RoKTsgICAgICAgICAgIC8v55Sf5oiQ5Zu65a6a6ZW/5bqm6KeG6aKR5a+56LGhICAgXHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdnMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICBmdW5jLnZhbHVlc1tpXSA9IG5ldyBWaWRlbyh2c1tpXS52aWQsIHZzW2ldLnR5cGUsIHZzW2ldLm5hbWUsIGZ1bmMudmFsdWVzQ2FsbGJhY2spOy8v5Lq65belbmV35a+56LGh77yM5ZCv5Yqo5p6E5bu65Zmo77yM572R57uc5ouJ5Y+W5pWw5o2u6L2s5YyWdmlk5Li6c3JjXHJcbiAgICAgIH0sXHJcbiAgICAgIGZhaWwocmVzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ+inhumikeivt+axgue9kee7nOi/nuaOpemUmeivr++8miAnICsgcmVzLmVyck1zZylcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuICByZXR1cm4gZnVuYztcclxufTtcclxuIl19