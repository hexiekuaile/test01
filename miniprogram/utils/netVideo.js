"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Video = (function () {
    function Video(vid, type, name, valueCallback) {
        this.vid = vid;
        this.type = type;
        this.name = name;
        this.valueCallback = valueCallback;
        this.convertVidToUrl();
    }
    Video.prototype.convertVidToUrl = function () {
        var that = this;
        wx.request({
            url: 'https://vv.video.qq.com/getinfo',
            data: {
                vids: that.vid,
                platform: 101001,
                charge: 0,
                otype: 'json'
            },
            header: {
                'content-type': 'application/json;charset=UTF-8'
            },
            method: 'GET',
            dataType: 'json',
            success: function (res) {
                var str = res.data;
                var url = str.match(/(?<=\[{"url":").*?(?=","vt")/);
                var urll = url ? url[0] : '';
                var fn = str.match(/(?<=,"fn":").*?(?=","fs")/);
                var fnn = fn ? fn[0] : '';
                var fvkey = str.match(/(?<=,"fvkey":").*?(?=","head")/);
                var fvkeyy = fvkey ? fvkey : '';
                var src = urll + fnn + "?vkey=" + fvkeyy;
                that.src = src;
                that.valueCallback(that);
            },
            fail: function (res) {
                console.log(that.name + ' 转换视频vid时错误：' + res.errMsg);
            }
        });
    };
    return Video;
}());
exports.Video = Video;
;
;
function getVideo(URLVideoJSON) {
    var func = function () {
        wx.request({
            url: URLVideoJSON,
            success: function (res) {
                var vs = res.data;
                func.values = new Array(vs.length);
                for (var i = 0; i < vs.length; i++)
                    func.values[i] = new Video(vs[i].vid, vs[i].type, vs[i].name, func.valuesCallback);
            },
            fail: function (res) {
                console.log('视频请求网络连接错误： ' + res.errMsg);
            }
        });
    };
    return func;
}
exports.getVideo = getVideo;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0VmlkZW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZXRWaWRlby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBTUUsZUFBWSxHQUFXLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxhQUFzQztRQUN6RixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBQ0QsK0JBQWUsR0FBZjtRQUNFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNmLEVBQUUsQ0FBQyxPQUFPLENBQUM7WUFDVCxHQUFHLEVBQUUsaUNBQWlDO1lBQ3RDLElBQUksRUFBRTtnQkFDSixJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2QsUUFBUSxFQUFFLE1BQU07Z0JBQ2hCLE1BQU0sRUFBRSxDQUFDO2dCQUNULEtBQUssRUFBRSxNQUFNO2FBQ2Q7WUFDRCxNQUFNLEVBQUU7Z0JBQ04sY0FBYyxFQUFFLGdDQUFnQzthQUNqRDtZQUNELE1BQU0sRUFBRSxLQUFLO1lBQ2IsUUFBUSxFQUFFLE1BQU07WUFDaEIsT0FBTyxZQUFDLEdBQUc7Z0JBQ1QsSUFBSSxHQUFHLEdBQVcsR0FBRyxDQUFDLElBQWMsQ0FBQztnQkFFckMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUM3QixJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7Z0JBQ2hELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQzFCLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFFaEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDO2dCQUN6QyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztnQkFDZixJQUFJLENBQUMsYUFBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVCLENBQUM7WUFDRCxJQUFJLFlBQUMsR0FBRztnQkFDTixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN0RCxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILFlBQUM7QUFBRCxDQUFDLEFBL0NELElBK0NDO0FBL0NZLHNCQUFLO0FBK0NqQixDQUFDO0FBTUQsQ0FBQztBQUVGLFNBQWdCLFFBQVEsQ0FBQyxZQUFvQjtJQUMzQyxJQUFJLElBQUksR0FBVztRQUNqQixFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ1QsR0FBRyxFQUFFLFlBQVk7WUFDakIsT0FBTyxZQUFDLEdBQUc7Z0JBQ1QsSUFBSSxFQUFFLEdBQVksR0FBRyxDQUFDLElBQUksQ0FBQztnQkFFM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRW5DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRTtvQkFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDdkYsQ0FBQztZQUNELElBQUksWUFBQyxHQUFHO2dCQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUMxQyxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBQ0YsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBbEJELDRCQWtCQztBQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVmlkZW8geyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v6IW+6K6v6KeG6aKR57G7XHJcbiAgdmlkOiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+iFvuiur+inhumikXZpZFxyXG4gIHR5cGU6IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+exu+Wei1xyXG4gIG5hbWU6IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5ZCN56ewXHJcbiAgc3JjPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+iFvuiur+inhumikeWunumZhee9kee7nOWcsOWdgCAgXHJcbiAgdmFsdWVDYWxsYmFjaz86ICh2YWx1ZTogVmlkZW8pID0+IHZvaWQ7ICAgICAgICAgICAgICAvL+WPr+mAieeahOWbnuiwg+aWueazle+8jCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICBjb25zdHJ1Y3Rvcih2aWQ6IHN0cmluZywgdHlwZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHZhbHVlQ2FsbGJhY2s/OiAodmFsdWU6IFZpZGVvKSA9PiB2b2lkKSB7XHJcbiAgICB0aGlzLnZpZCA9IHZpZDtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy52YWx1ZUNhbGxiYWNrID0gdmFsdWVDYWxsYmFjaztcclxuICAgIHRoaXMuY29udmVydFZpZFRvVXJsKCk7Ly/lnKjliJ3lp4vljJblr7nosaHml7bvvIzogZTnvZHovazljJZ2aWRcclxuICB9XHJcbiAgY29udmVydFZpZFRvVXJsKCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5bCGdmlk6L2s5o2i5Li6VVJMLOaciee9kee7nOivt+axguW7tui/n1xyXG4gICAgbGV0IHRoYXQgPSB0aGlzXHJcbiAgICB3eC5yZXF1ZXN0KHtcclxuICAgICAgdXJsOiAnaHR0cHM6Ly92di52aWRlby5xcS5jb20vZ2V0aW5mbycsXHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICB2aWRzOiB0aGF0LnZpZCxcclxuICAgICAgICBwbGF0Zm9ybTogMTAxMDAxLFxyXG4gICAgICAgIGNoYXJnZTogMCxcclxuICAgICAgICBvdHlwZTogJ2pzb24nXHJcbiAgICAgIH0sXHJcbiAgICAgIGhlYWRlcjoge1xyXG4gICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04JyAvLyDpu5jorqTlgLxcclxuICAgICAgfSxcclxuICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgc3VjY2VzcyhyZXMpIHtcclxuICAgICAgICBsZXQgc3RyOiBzdHJpbmcgPSByZXMuZGF0YSBhcyBzdHJpbmc7XHJcbiAgICAgICAgLy/nlKjmraPliJnooajovr7lvI9cclxuICAgICAgICBsZXQgdXJsID0gc3RyLm1hdGNoKC8oPzw9XFxbe1widXJsXCI6XCIpLio/KD89XCIsXCJ2dFwiKS8pO1xyXG4gICAgICAgIGxldCB1cmxsID0gdXJsID8gdXJsWzBdIDogJyc7XHJcbiAgICAgICAgbGV0IGZuID0gc3RyLm1hdGNoKC8oPzw9LFwiZm5cIjpcIikuKj8oPz1cIixcImZzXCIpLyk7XHJcbiAgICAgICAgbGV0IGZubiA9IGZuID8gZm5bMF0gOiAnJztcclxuICAgICAgICBsZXQgZnZrZXkgPSBzdHIubWF0Y2goLyg/PD0sXCJmdmtleVwiOlwiKS4qPyg/PVwiLFwiaGVhZFwiKS8pO1xyXG4gICAgICAgIGxldCBmdmtleXkgPSBmdmtleSA/IGZ2a2V5IDogJyc7XHJcbiAgICAgICAgLy/op4Tlvot1cmwgKyBmbiArICc/dmtleT0nICsgZnZrZXkgXHJcbiAgICAgICAgbGV0IHNyYyA9IHVybGwgKyBmbm4gKyBcIj92a2V5PVwiICsgZnZrZXl5O1xyXG4gICAgICAgIHRoYXQuc3JjID0gc3JjO1xyXG4gICAgICAgIHRoYXQudmFsdWVDYWxsYmFjayEodGhhdCk7Ly/vvIHooajnpLrlt7Lnu4/liJ3lp4vljJbvvIzlm57osIPlrZjlnKjjgILkvKDpgJLmnKx2aWRlb+WvueixoVxyXG4gICAgICB9LFxyXG4gICAgICBmYWlsKHJlcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoYXQubmFtZSArICcg6L2s5o2i6KeG6aKRdmlk5pe26ZSZ6K+v77yaJyArIHJlcy5lcnJNc2cpXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVZpZGVvIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5re35ZCI57G75Z6L55qE5o6l5Y+j77yM6KeG6aKR5o6l5Y+jXHJcbiAgKCk6IHZvaWQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/mjqXlj6PnmoTln7rnoYDmlrnms5VcclxuICB2YWx1ZXM6IFZpZGVvW107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+inhumikeaVsOe7hO+8jOeUseWfuuehgOaWueazleS7jue9kee7nOivt+axguaVsOaNrlxyXG4gIHZhbHVlc0NhbGxiYWNrPzogKHZpZGVvOiBWaWRlbykgPT4gdm9pZDsgICAgICAgICAgIC8v5Y+v6YCJ55qE5o6l5Y+j55qE5Zue6LCD5pa55rOV77yMXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmlkZW8oVVJMVmlkZW9KU09OOiBzdHJpbmcpOiBJVmlkZW8geyAgICAvL+aOpeWPo+WunueOsO+8jOS7heWunueOsOS6huWfuuehgOaWueazleS7o+egge+8jOacquWunueOsOWbnuiwg+aWueazle+8jFxyXG4gIGxldCBmdW5jID0gPElWaWRlbz5mdW5jdGlvbiAoKSB7XHJcbiAgICB3eC5yZXF1ZXN0KHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/nvZHnu5zor7fmsYLlj5bmlbDmja5cclxuICAgICAgdXJsOiBVUkxWaWRlb0pTT04sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/nroDljZXlnLDlm77moIforrDngrlqc29u5paH5Lu255qE572R57uc5Zyw5Z2AXHJcbiAgICAgIHN1Y2Nlc3MocmVzKSB7XHJcbiAgICAgICAgbGV0IHZzID0gPFZpZGVvW10+cmVzLmRhdGE7ICAgICAgICAgICAgICAgICAgIC8vdHlwZXNjcmlwdOiHquWKqOijhemFje+8jOWFtuS7luS/oeaBr+mDveWtmOWcqO+8jOS7hXNyY+S4uuepuu+8jOS9huS4jeWQr+WKqOinhumikeexu+eahOaehOW7uuWZqO+8jOmcgOimgeS6uuW3pW5ld+WvueixoVxyXG5cclxuICAgICAgICBmdW5jLnZhbHVlcyA9IG5ldyBBcnJheSh2cy5sZW5ndGgpOyAgICAgICAgICAgLy/nlJ/miJDlm7rlrprplb/luqbop4bpopHlr7nosaEgICBcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2cy5sZW5ndGg7IGkrKylcclxuICAgICAgICAgIGZ1bmMudmFsdWVzW2ldID0gbmV3IFZpZGVvKHZzW2ldLnZpZCwgdnNbaV0udHlwZSwgdnNbaV0ubmFtZSwgZnVuYy52YWx1ZXNDYWxsYmFjayk7Ly/kurrlt6VuZXflr7nosaHvvIzlkK/liqjmnoTlu7rlmajvvIznvZHnu5zmi4nlj5bmlbDmja7ovazljJZ2aWTkuLpzcmNcclxuICAgICAgfSxcclxuICAgICAgZmFpbChyZXMpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygn6KeG6aKR6K+35rGC572R57uc6L+e5o6l6ZSZ6K+v77yaICcgKyByZXMuZXJyTXNnKVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG4gIHJldHVybiBmdW5jO1xyXG59O1xyXG4iXX0=